{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","preparedGoods","goods","visibleGoods","sort","good1","good2","ALPABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EA/BD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAGNO,EAAY,YAAOD,GAoBzB,OAjBAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQP,GACN,KAAKP,EAASe,QACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITd,GACFO,EAAaQ,UAGRR,EAMeS,CACpBnB,EACA,CAAEM,WAAUH,eAGd,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,WAAYhB,IAAaP,EAASe,UAEpCS,QAAS,kBAAMhB,EAAYR,EAASe,UALtC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,WAAYhB,IAAaP,EAASiB,SAEpCO,QAAS,kBAAMhB,EAAYR,EAASiB,SALtC,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,YAAanB,IAEfoB,QAAS,kBAAMnB,GAAeD,IALhC,sBAWGG,IAAaP,EAASM,MAAQF,IAC7B,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPnB,GAAc,GACdG,EAAYR,EAASM,OALzB,sBAcN,6BACE,6BACGG,EAAcgB,KAAI,SAAAC,GAAI,OACrB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,cClHrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a782be3f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const preparedGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info', {\n            'is-light': sortType !== SortType.ALPABET,\n          })}\n          onClick={() => setSortType(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {\n          (sortType !== SortType.NONE || isReversed) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                setIsReversed(false);\n                setSortType(SortType.NONE);\n              }}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        <ul>\n          {preparedGoods.map(good => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}